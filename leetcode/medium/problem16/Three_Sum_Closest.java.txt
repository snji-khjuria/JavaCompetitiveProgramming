/*
Algorithm:
1. Handle the null/base case
2. Sort the array
3. For each possible candidate for "a", find "b" and "c" and if the diff becomes lesser w.r.t  target return it right away
*/


class Solution {
    public int threeSumClosest(int[] nums, int target) {
        int ans = 0;
        if(nums==null || nums.length<3)
            return -1;
        ans = nums[0]+nums[1]+nums[2];
        Arrays.sort(nums);
        for(int i=0; i<=nums.length-3; i++) {
            ans = giveMeClosest(nums, i+1, nums.length-1, nums[i], target, ans);    
        }
        return ans;
    }
    int giveMeClosest(int[] nums, int s, int e, int a, int target, int ans) {
        while(s<e){
            int now = a+nums[s]+nums[e];
            if(now==target)
                return target;
            if(now<target){s++;}
            else if(now>target){e--;}
            int diff = Math.abs(target-now);
            int prevdiff = Math.abs(target-ans);
            if(prevdiff>diff){ans=now;}
        }
        return ans;
    }
}