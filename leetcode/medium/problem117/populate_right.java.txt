/*
Algorithm: Follow Queue pattern
*/

/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}

    public Node(int _val,Node _left,Node _right,Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/
class Solution {
    public Node connect(Node root) {
        Queue<Node> q = new LinkedList<Node>();
        if(root==null)
            return null;
        q.add(root);
        Node ans = root;
        while(!q.isEmpty()) {
            int total=q.size();
            for(int i=0; i<total; i++) {
                root = q.remove();
                if(root.left!=null)
                    q.add(root.left);
                if(root.right!=null)
                    q.add(root.right);
                if(i!=total-1)
                    root.next=q.peek();
                else
                    root.next=null;
            }
        }
        return ans;
    }
}