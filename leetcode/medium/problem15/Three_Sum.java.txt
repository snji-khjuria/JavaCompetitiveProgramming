/*Algorithm:
1. Handle the base case of empty array
2. Sort the array
3. For every possible candidate to go in ans of size 3 pick that number and find 2 numbers supporting that candidate
4. return all the answers.
*/

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> al = new ArrayList<List<Integer>>();
        if(nums==null || nums.length==0)
            return al;
        Arrays.sort(nums);
        for(int i=0; i<=nums.length-3; i++) {
            if(i!=0 && nums[i]==nums[i-1]){continue;}
            addTwoSum(nums, i+1, nums.length-1, -nums[i], al);
        }
        return al;
    }
    void addTwoSum(int[] nums, int s, int e, int total, List<List<Integer>> al) {
        while(s<e) {
            int sum = nums[s] + nums[e];
            if(sum==total) {
                ArrayList<Integer> ans = new ArrayList<Integer>();
                ans.add(-total);ans.add(nums[s]); ans.add(nums[e]);
                al.add(ans);
                s++;e--;
                while(s<e && nums[s]==nums[s-1])s++;
                while(s<e && nums[e]==nums[e+1])e--;
            }else if(sum>total){e--;}
            else{s++;}
        }
    }
}