/*
TODO:
Use Queue pattern to solve the problem.
TODO: Explian Queue pattern

*/


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        if(root==null){return result;}
        Queue<TreeNode> q = new LinkedList<TreeNode>();
        q.add(root);
        while(!q.isEmpty()) {
            int total=q.size();
            List<Integer> current = new ArrayList<Integer>();
            for(int i=0; i<total; i++) {
                TreeNode n = q.remove();
                current.add(n.val);
                if(n.left!=null)
                    q.add(n.left);
                if(n.right!=null)
                    q.add(n.right);
            }
            result.add(0, current);
        }
        return result;
    }
}