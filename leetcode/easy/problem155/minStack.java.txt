/*
Algorithm:
Maintain an auxiliary stack where we push the elements whenever there is nothing on original stack or the new element is less than auxiliary's
top element
Pop the element from auxiliary stack whenever you pop element from original stack and you find it on auxiliary stack top
*/

class MinStack {

    Stack<Integer> mainStack;
    Stack<Integer> supportStack;
    /** initialize your data structure here. */
    public MinStack() {
        mainStack = new Stack<Integer>();
        supportStack = new Stack<Integer>();
    }
    
    public void push(int x) {
        mainStack.push(x);
        if(supportStack.isEmpty() || supportStack.peek()>=x)
            supportStack.push(x);
    }
    
    public void pop() {
        if(mainStack.isEmpty())
            return;
        int elt = mainStack.pop();
        if(elt==supportStack.peek())
            supportStack.pop();
    }
    
    public int top() {
        return mainStack.peek();
    }
    
    public int getMin() {
        return supportStack.peek();
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */